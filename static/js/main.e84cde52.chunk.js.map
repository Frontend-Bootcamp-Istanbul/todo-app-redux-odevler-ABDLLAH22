{"version":3,"sources":["actions/actions.js","actionCreators/actionCreaters.js","Todo.js","TodoList.js","AddTodo.js","RemoveAll.js","Filters.js","App.js","serviceWorker.js","reducer/todosReducer.js","reducer/reducer.js","reducer/notificationsReducer.js","store.js","index.js"],"names":["SET_FILTER","SET_TODOS","ADD_TODO","REMOVE_TODO","SHOW_NOTIFICATON","HIDE_NOTIFICATION","showNotification","text","dispatch","type","setTimeout","ItemButton","styled","div","connect","removeTodo","id","props","content","itemClass","checked","className","onClick","onCheckedToggle","e","stopPropagation","TodoList","this","title","todos","length","map","todo","key","React","Component","defaultProps","AddTodo","state","inputVal","changeInput","bind","addTodo","newVal","target","value","setState","event","preventDefault","onTodoAdd","onAdd","onSubmit","onChange","RemoveAll","onRemoveAll","options","label","labelKey","Filters","console","log","option","changeFilter","activeFilter","newFilter","setFilter","App","filterTodos","filterType","filter","removeAllTodos","toggleCompleteStatus","localTodos","window","localStorage","getItem","JSON","parse","addTodos","prevProps","prevState","snapshot","stringify","setItem","newTodo","Math","random","removeItem","newArr","currentTodo","notificationVisibility","style","notificationText","todosReducer","notificationReducer","setTodos","Boolean","location","hostname","match","rootReducer","combineReducers","action","concat","newTodos","store","createStore","reducer","compose","applyMiddleware","thunk","devToolsExtension","f","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e84cde52.chunk.js","sourcesContent":["export const SET_FILTER = 'SET_FILTER';\nexport const SET_TODOS  = 'SET_TODOS';\nexport const ADD_TODO   = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\nexport const SHOW_NOTIFICATON  = 'SHOW_NOTIFICATION';\nexport const HIDE_NOTIFICATION  = 'HIDE_NOTIFICATION';","import {SET_FILTER,\n    SET_TODOS, ADD_TODO, REMOVE_TODO,\n    SHOW_NOTIFICATON,\n    HIDE_NOTIFICATION} from \"../actions/actions\";\n\nexport function setFilter(newFilter){\n    return {type: SET_FILTER, activeFilter: newFilter}\n}\n\nexport function setTodos(todos){\n    return {type: SET_TODOS, todos}\n}\n\nexport function addTodo(todo){\n    return (dispatch) => {\n        if(todo.content){\n            dispatch({type: ADD_TODO, todo});\n            dispatch(showNotification(`${todo.content} Eklendi`));\n        }else {\n            dispatch(showNotification(\"Boş eklenemez !!!!\"));\n        }\n}}\n\nexport function removeTodo(id){\n    return {type: REMOVE_TODO, id}\n}\n\nexport function showNotification(text){\n    return (dispatch) => {\n        dispatch({type: SHOW_NOTIFICATON, text});\n        setTimeout(() => {\n            dispatch(hideNotification());\n        }, 2000);\n    }\n}\n\nexport function hideNotification() {\n    return {type: HIDE_NOTIFICATION}\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {setFilter, removeTodo} from \"./actionCreators/actionCreaters\";\nimport styled from \"styled-components\";\n\nconst ItemButton = styled.div`\n    background: red;\n    position: relative;\n    > span {\n        position: absolute;\n    } \n`;\n\n\nfunction Todo(props) {\n    const {content, id, checked} = props;\n    let itemClass= \"todo-item\";\n    if(checked){\n        itemClass += \" checked\";\n    }\n    return (\n        <ItemButton className={itemClass} onClick={() => {props.onCheckedToggle(id);}}>\n            {content}\n            <span\n                className=\"remove-todo\"\n                onClick={(e) => {e.stopPropagation();props.removeTodo(id)}}>X</span>\n        </ItemButton>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n    removeTodo: (id) => {dispatch(removeTodo(id))}\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport Todo from './Todo';\n\n\nclass TodoList extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return (\n            <div className=\"todo-list\">\n                <h3>{this.props.title} <span>{this.props.todos.length}</span>\n                </h3>\n                {\n                    this.props.todos.map((todo) => {\n                        return <Todo\n                            {...todo}\n                            key={todo.id}\n                            onCheckedToggle={this.props.onCheckedToggle}\n                        />\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nTodoList.propTypes = {\n  title: PropTypes.string\n};\n\nTodoList.defaultProps = {\n    title: \"Başlık\"\n};\n\nexport default TodoList;\n","import React from 'react';\n\n\nclass AddTodo extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            inputVal: \"\"\n        };\n        this.changeInput = this.changeInput.bind(this);\n        this.addTodo = this.addTodo.bind(this);\n    }\n\n    changeInput(e){\n        const newVal = e.target.value;\n        this.setState({\n            inputVal: newVal\n        });\n    }\n\n    addTodo(event){\n        event.preventDefault();\n        this.props.onTodoAdd(this.state.inputVal);\n        this.setState({\n            inputVal: \"\"\n        });\n    }\n\n    render() {\n        const {onAdd} = this.props;\n        return <form\n            onSubmit={this.addTodo}>\n            <input\n                type=\"text\"\n                value={this.state.inputVal}\n                onChange={this.changeInput} />\n            <button>Ekle</button>\n        </form>\n    }\n}\n\nexport default AddTodo;\n","import React from 'react';\n\n\nclass RemoveAll extends React.Component {\n    render() {\n        return <button className=\"remove-all\" onClick={() => {this.props.onRemoveAll()}}>\n                Tümünü Sil\n        </button>\n    }\n}\n\nexport default RemoveAll;\n","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {setFilter} from \"./actionCreators/actionCreaters\";\n\nconst options = [\n    {label: \"Hepsi\", labelKey: \"all\"},\n    {label: \"Tamamlanmış\", labelKey: \"completed\"},\n    {label: \"Tamamlanmamış\", labelKey: \"uncompleted\"}\n];\n\nclass Filters extends Component {\n    render() {\n        console.log(this.props);\n        return <div>\n            {\n                options.map((option) => {\n                    return <div onClick={() => {\n                        this.props.changeFilter(option.labelKey);\n                    }}>\n                        {option.label}\n                    </div>\n                })\n            }\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        activeFilter: state.activeFilter\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: (newFilter) => {dispatch(setFilter(newFilter))}\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filters);","import React, {Component} from 'react';\nimport TodoList from \"./TodoList\";\nimport AddTodo from \"./AddTodo\";\nimport RemoveAll from \"./RemoveAll\";\nimport \"./App.scss\";\nimport Filters from \"./Filters\";\nimport {connect} from \"react-redux\";\nimport {setFilter, setTodos, addTodo, showNotification, hideNotification} from \"./actionCreators/actionCreaters\";\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.addTodo = this.addTodo.bind(this);\n    this.removeAllTodos = this.removeAllTodos.bind(this);\n    this.toggleCompleteStatus = this.toggleCompleteStatus.bind(this);\n  }\n\n  componentDidMount() {\n      console.log(\"GÜncel proplar\", this.props);\n    // Component oluştuktan sonra gerekli olan datayı localstoragedan geyiriyoruz.\n    let localTodos = window.localStorage.getItem(\"todos\");\n    if(localTodos){\n      localTodos  = JSON.parse(localTodos);\n    }\n    this.props.addTodos(localTodos || []);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n      if(JSON.stringify(prevProps.todos) !== JSON.stringify(this.props.todos)){\n          window.localStorage.setItem(\"todos\", JSON.stringify(this.props.todos))\n      }\n  }\n\n    addTodo(newTodo){\n      this.props.addTodo({\n          content: newTodo,\n          id: Math.random(),\n          checked: false\n      });\n  }\n\n  removeAllTodos(){\n    this.setState({\n        todos: []\n    }, () => {\n        window.localStorage.removeItem(\"todos\");\n    })\n  }\n\n  toggleCompleteStatus(id){\n      // Map ile mevcut todolar arasında döngüye girip, değiştirmek istediğimi farklı şekilde dönüyorum.\n      // Aradığım itemin checked statusunu değiştiriyorum, rest ile kopyalayarak yani mutate etmeden.\n      // Diğer elemanları olduğu gibi dönüyorum, \"return todo\";\n      const newArr = this.state.todos.map((todo) => {\n          if(id === todo.id){\n              let currentTodo = {...todo};\n              currentTodo.checked = !currentTodo.checked;\n              return currentTodo;\n          }else{\n              return todo;\n          }\n      });\n      this.setState({\n          todos: newArr\n      }, () => {\n          window.localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n      });\n  }\n\n  filterTodos = (todos, filterType) => {\n    if(filterType === \"all\"){\n        return todos;\n    }else if (filterType === \"completed\"){\n        return todos.filter((todo) => todo.checked);\n    }else{\n        return todos.filter((todo) => !todo.checked);\n    }\n  }\n\n  render(){\n      console.log(\"App props\", this.props);\n    return (\n        <div className=\"App\" id=\"todo\">\n            {\n                this.props.notificationVisibility &&  <div style={{\"background\": \"black\", \"color\": \"white\", \"padding\": \"15px\", \"fontSize\": \"20px\"}}>\n                    {this.props.notificationText}\n                </div>\n            }\n            <div className=\"todo-list todo-list-add\">\n                <h3>Todo Ekle / Sil</h3>\n                <div>\n                    <AddTodo   onTodoAdd={this.addTodo} />\n                    <RemoveAll onRemoveAll={this.removeAllTodos}/>\n                    <Filters />\n                </div>\n            </div>\n            <TodoList\n                todos={this.filterTodos(this.props.todos, this.props.activeFilter)}\n                onCheckedToggle={this.toggleCompleteStatus} />\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n    console.log(state);\n    return {\n  activeFilter: state.todosReducer.activeFilter,\n  todos: state.todosReducer.todos,\n  notificationVisibility: state.notificationReducer.notificationVisibility,\n  notificationText: state.notificationReducer.notificationText}\n};\n\nconst mapDispatchToProps = dispatch => ({\n    addTodos: (todos) => {dispatch(setTodos(todos))},\n    addTodo: (todo) => {dispatch(addTodo(todo))},\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD_TODO, REMOVE_TODO, SET_FILTER, SET_TODOS} from \"../actions/actions\";\n\nexport const todosReducer = function (state = {\n    activeFilter: \"all\",\n    todos: [],\n}, action) {\n    switch (action.type) {\n        case SET_FILTER:\n            return {...state, activeFilter: action.activeFilter};\n        case SET_TODOS:\n            return {...state, todos: action.todos}\n        case ADD_TODO:\n            return {...state, todos: state.todos.concat([action.todo])}\n        case REMOVE_TODO:\n            const newTodos = state.todos.filter((todo) => todo.id !== action.id);\n            return {\n                ...state,\n                todos: newTodos\n            };\n        default:\n            return state;\n    }\n};","import {SET_FILTER, SET_TODOS, ADD_TODO, REMOVE_TODO, SHOW_NOTIFICATON, HIDE_NOTIFICATION} from \"../actions/actions\";\nimport {combineReducers} from \"redux\";\nimport {notificationReducer} from \"./notificationsReducer\";\nimport {todosReducer} from \"./todosReducer\";\n\nconst rootReducer = combineReducers({todosReducer, notificationReducer});\n\nexport default rootReducer;","import {HIDE_NOTIFICATION, SHOW_NOTIFICATON} from \"../actions/actions\";\n\nexport const notificationReducer = function (state = {\n    notificationVisibility: false,\n    notificationText: \"\"\n}, action) {\n    switch (action.type) {\n        case SHOW_NOTIFICATON:\n            return {\n                ...state,\n                notificationVisibility: true,\n                notificationText: action.text\n            }\n        case HIDE_NOTIFICATION:\n            return {\n                ...state,\n                notificationVisibility: false\n            }\n        default:\n            return state;\n    }\n};\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer/reducer';\n\nconst store = createStore(reducer, compose(\n    applyMiddleware(thunk),\n    window.devToolsExtension ? window.devToolsExtension() : f => f\n));\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider, connect} from \"react-redux\";\nimport store  from \"./store\";\n\nconst ProvideApp = (props) => <Provider store={store}><App /></Provider>\nReactDOM.render(<ProvideApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}